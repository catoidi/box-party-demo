//boxparty.acs
//this file is called in every level of the game.
#library "BOXPARTY"
#include "zcommon.acs"

int glowkill;
int glowmax = 250;
int glowremain = 0;

int eggkill;
int eggmax = 30;

int bscore1 = 0, bscore2 = 0, bscore3 = 0, bscore4 = 0, bscore5 = 0, bscore6 = 0, bscore7 = 0, bscore8 = 0, 
	cscore1 = 0, cscore2 = 0, cscore3 = 0, cscore4 = 0, cscore5 = 0, cscore6 = 0, cscore7 = 0, cscore8 = 0;

//quest variables
bool togglesidequests_0 = false;
bool togglesidequests_1 = false;
bool togglesidequests_2 = false;
bool togglesidequests_3 = false;
bool togglesidequests_4 = false;
bool togglesidequests_5 = false;
bool togglesidequests_6 = false;
bool togglesidequests_7 = false;

str quest1_name = "QUEST_NONE";
str quest1_progress = "QUEST_NONE";
str quest2_name = "QUEST_NONE";
str quest2_progress = "QUEST_NONE";
str quest3_name = "QUEST_NONE";
str quest3_progress = "QUEST_NONE";
bool quest1done = false;
bool quest2done = false;
bool quest3done = false;

int qdone = 0;

SCRIPT "playerscript" ENTER
{
	SetAirControl(1.0);
	
	if (GetCVAR("box_checkbadcvar") == 1) { ACS_NamedExecute("CheckBadCVar", 0, 0, 0, 0); }
	//warns player if using a setting that can break compatibility with box party levels.
	
	if (CheckInventory("PlayerGlassToken")) {GiveInventory("GlassProtection", 1);}
	//gives protection from lava.
	
	if (ActivatorTID() < 7500) {Thing_ChangeTID(0, 7500 + PlayerNumber());}
	//Log(d:ActivatorTID());
	//player 1 is 7500, player 8 is 7507.
	
	switch (PlayerNumber())
	{
		case 0: bscore1 = GetActorProperty(7500, APROP_Score); break;
		case 1: bscore2 = GetActorProperty(7501, APROP_Score); break;
		case 2: bscore3 = GetActorProperty(7502, APROP_Score); break;
		case 3: bscore4 = GetActorProperty(7503, APROP_Score); break;
		case 4: bscore5 = GetActorProperty(7504, APROP_Score); break;
		case 5: bscore6 = GetActorProperty(7505, APROP_Score); break;
		case 6: bscore7 = GetActorProperty(7506, APROP_Score); break;
		case 7: bscore8 = GetActorProperty(7507, APROP_Score); break;
	}
	
	//check for when all enemies are defeated. used for multiple things.
	bool noenemies = false;
	
	int mtotal = GetLevelInfo (LEVELINFO_TOTAL_MONSTERS),
        mkilled = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
	while (noenemies == false)
	{
		mtotal = GetLevelInfo (LEVELINFO_TOTAL_MONSTERS);
        mkilled = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
	
		if ((mtotal <= mkilled) && (mtotal > 0))
		{
			switch (random(0, 3))
			{
				case 0: HudMessage(l:"NOENEMIES1"; HUDMSG_PLAIN, 0, CR_YELLOW, 0.5, 0.25, 4.0); break;
				case 1: HudMessage(l:"NOENEMIES2"; HUDMSG_PLAIN, 0, CR_YELLOW, 0.5, 0.25, 4.0); break;
				case 2: HudMessage(l:"NOENEMIES3"; HUDMSG_PLAIN, 0, CR_YELLOW, 0.5, 0.25, 4.0); break;
				case 3: HudMessage(l:"NOENEMIES4"; HUDMSG_PLAIN, 0, CR_YELLOW, 0.5, 0.25, 4.0); break;
			}
			GiveInventory("AllEnemiesCleared", 1);
			noenemies = true;
			ACS_NamedExecute("nomoreenemies", 0, 0, 0, 0);
		}
		
		Delay(5);
	}
	
	//:)
}

script "resetplayerTID" RESPAWN
{
	//Make sure our old dead body doesn't still have our tid
	//this is just copy/pasted from the zdoom wiki.
	Thing_ChangeTID(7500+PlayerNumber(),0);
	Thing_ChangeTID(0,7500+PlayerNumber());
	
	//also make sure bscore is reset upon respawn, since player's score gets wiped to 0.
	switch (PlayerNumber())
	{
		case 0: bscore1 = 0; break;
		case 1: bscore2 = 0; break;
		case 2: bscore3 = 0; break;
		case 3: bscore4 = 0; break;
		case 4: bscore5 = 0; break;
		case 5: bscore6 = 0; break;
		case 6: bscore7 = 0; break;
		case 7: bscore8 = 0; break;
	}
}

function void box_gethat (str hatcvar, str hatachieve)
{
	//hatcvar is the CVAR that the unlocked hat uses. hatachieve is the actor that displays this hat's corresponding achievement box.
	bool popupshown = false;
	
	for (int i = 0; i < 8; i++)
	{
		int plnum = 7500 + i;
		if ((GetUserCVAR(i, hatcvar) == false) && (IsTIDUsed(plnum) == true))
		{
			//unlock the hat cvar for all players
			SetActivator(plnum);
			SetUserCVAR(i, hatcvar, true);
			if (popupshown == false)
			{
				//show hat unlock popup, but only once.
				ScriptCall("box_Achiever", "achieve", hatachieve);
				popupshown = true;
			}
		}
	}
}

SCRIPT "FunChecker" OPEN
{
	//checks for fun.
	if (GetCVAR("box_fun") == 0) {SetCVAR("box_fun", random(1, 100));}
}

SCRIPT "doboxability" (void) net
{
	if (CheckInventory("PlayerGlassToken"))
	{
		if (CheckInventory("BoxPower") >= 20)
		{
			if (GetActorProperty(0, APROP_Health) > 0)
			{
				GiveInventory("GlassDasher", 1);
				TakeInventory("BoxPower", 20);
			}
		}
	}
}

SCRIPT "playerpartime" (int whatsthenum)
{
	//this handles distributing speedrunning hats in the main story.

	int whatsthepar = GetLevelInfo(LEVELINFO_PAR_TIME);
	if (Timer() <= (whatsthepar * 35)) 
	{
		switch (whatsthenum)
		{
			default:
			case 0: 
				break;
			case 1: 
				box_gethat("box_hat_unlock_06", "box_unlockhat_06");
				break;
			case 2: 
				box_gethat("box_hat_unlock_05", "box_unlockhat_05");
				break;
			case 3: 
				box_gethat("box_hat_unlock_07", "box_unlockhat_07");
				break;
		}
	}
}

//use this in every level that isn't difficulty select or level 1.
SCRIPT "giveglowstick" (void) {if (CheckInventory("Glowstick") == 0) {GiveInventory("Glowstick", 1);}}

SCRIPT "PlateSpawnScript" (int PlateSpawned) 
{
	//script that plays when a plate spawner performs the act of "spawning" a monster.
	if (SetActorPosition(PlateSpawned, GetActorX(0), GetActorY(0), GetActorZ(0), false))
	{
		SetActorPosition(PlateSpawned, GetActorX(0), GetActorY(0), GetActorZ(0), false);
		SetActorAngle(PlateSpawned, GetActorAngle(0));
	}
	else
	{
		Thing_Damage(PlateSpawned, 999999, MOD_UNKNOWN);
		Spawn("SafeBoom", GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
		PlaySound(0, "wilhelm", CHAN_BODY, 1.0, false, ATTN_NORM, false);
	}
}

SCRIPT "CheckBadCVar" (void)
{
	//This might be annoying to non-newbies, so there's an option to disable this in "Advanced Box Options".
	if (GetCVAR("sv_freelook") == 1) { HudMessage(l:"BOX_WARNING_FREELOOK"; HUDMSG_PLAIN | HUDMSG_LOG, 400, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("sv_crouch") == 1) { HudMessage(l:"BOX_WARNING_CROUCH"; HUDMSG_PLAIN | HUDMSG_LOG, 401, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("sv_jump") == 1) { HudMessage(l:"BOX_WARNING_JUMP"; HUDMSG_PLAIN | HUDMSG_LOG, 402, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("sv_degeneration") == 1) { HudMessage(l:"BOX_WARNING_DEGENERATION"; HUDMSG_PLAIN | HUDMSG_LOG, 403, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("sv_fallingdamage") != 0) { HudMessage(l:"BOX_WARNING_FALLINGDAMAGE"; HUDMSG_PLAIN | HUDMSG_LOG, 404, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("compatmode") != 0) { HudMessage(l:"BOX_WARNING_COMPATMODE"; HUDMSG_PLAIN | HUDMSG_LOG, 405, CR_Brick, 0.5, 0.2, 5.0); }
	if (GetCVAR("sv_fastweapons") == 1) { HudMessage(l:"BOX_WARNING_FASTWEAPONS"; HUDMSG_PLAIN | HUDMSG_LOG, 406, CR_Brick, 0.5, 0.2, 5.0); }
}

//old checks. might not be needed anymore.
SCRIPT "npccheck" (void) {SetResultValue(GetCVAR("box_nonpcs"));}
SCRIPT "crumbcheck" (void) {SetResultValue(GetCVAR("box_nocrumbs"));}
SCRIPT "skycheck" (void) {SetResultValue(GetCVAR("box_simplesky"));}
SCRIPT "BoxHatSwitcher" (int HatNumber)
{
	TakeInventory("playerhatnumber", 9999);
	GiveInventory("playerhatnumber", HatNumber);
}


script "noammo" (void)
{
	if (GetCVAR("box_noammo") == true)
	{
		SetHudSize(160, 100, false);
		HudMessage(l:"NOAMMO"; HUDMSG_PLAIN, -100, CR_RED, 50.0, 25.0, 0.25);
		Delay(5);
		HudMessage(l:"NOAMMO"; HUDMSG_PLAIN, -100, CR_BRICK, 50.0, 25.0, 0.25);
		Delay(5);
		HudMessage(l:"NOAMMO"; HUDMSG_PLAIN, -100, CR_RED, 50.0, 25.0, 0.25);
		Delay(5);
		HudMessage(l:"NOAMMO"; HUDMSG_PLAIN, -100, CR_BRICK, 50.0, 25.0, 0.25);
	}
}

script "exitscreen" (void)
{
	//screen that plays when you complete a story level.
	//move all players off screen and show exit camera.
	ChangeCamera(7575, 1, 0);
	Thing_Move(7500, 7600, true);
	Thing_Move(7501, 7601, true);
	Thing_Move(7502, 7602, true);
	Thing_Move(7503, 7603, true);
	Thing_Move(7504, 7604, true);
	Thing_Move(7505, 7605, true);
	Thing_Move(7506, 7606, true);
	Thing_Move(7507, 7607, true);
	SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
	//fade to black
	SetFont("BLACK_50");
	SetHudSize(1, 1, false);
	HudMessageBold(s:"A"; HUDMSG_FADEINOUT, -123456780, CR_UNTRANSLATED, 0.0, 0.0, 8.0, 1.0, 1.0);
	//level complete
	SetFont("SMALLFONT");
	SetHudSize(160, 100, false);
	HudMessageBold(l:"LEVEL_COMPLETE"; HUDMSG_PLAIN, -123456781, CR_CYAN, 80.0, 30.0, 9.0);
	//enemies killed
	Delay(35);
	SetHudSize(320, 200, false);
	int mtotal = GetLevelInfo (LEVELINFO_TOTAL_MONSTERS),
        mkilled = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
	HudMessageBold(l:"FOOD_DEFEATED", d:mkilled, s:"/", d:mtotal; HUDMSG_PLAIN, -123456782, CR_GREEN, 160.0, 80.0, 8.0);
	//quests completed
	Delay(18);
	if (quest1_name == "QUEST_NONE") {HudMessageBold(l:"QUESTS_DONE2"; HUDMSG_PLAIN, -123456783, CR_YELLOW, 160.0, 100.0, 7.5);}
	else {HudMessageBold(l:"QUESTS_DONE", d:qdone, s:"/3"; HUDMSG_PLAIN, -123456783, CR_YELLOW, 160.0, 100.0, 7.5);}
	//your lvl score
	Delay(17);
	for (int p = 7500; p < 7508; p++)
	{
		if (PlayerInGame(p - 7500))
		{
			SetActivator(p);
			int fscore = GetActorProperty(p, APROP_Score); 
			switch(p - 7500)
			{
				case 0: fscore -= bscore1; break;
				case 1: fscore -= bscore2; break;
				case 2: fscore -= bscore3; break;
				case 3: fscore -= bscore4; break;
				case 4: fscore -= bscore5; break;
				case 5: fscore -= bscore6; break;
				case 6: fscore -= bscore7; break;
				case 7: fscore -= bscore8; break;
			}
			HudMessage(l:"YOUR_SCORE", d:fscore; HUDMSG_PLAIN, -123456784, CR_BRICK, 160.0, 120.0, 7.0);
		}
	}
	//highest lvl score (multiplayer only)
	Delay(18);
	if (PlayerCount() > 1)
	{
		int bestscore = 0;
		int bestscore_player = 0;
		//get all the player's level scores
		for (int pA = 7500; pA < 7508; pA++)
		{
			if (PlayerInGame(pA - 7500))
			{
				switch(pA - 7500)
				{
					//get player's current 'level' score, not total score.
					//lotta copy/pasting here, i know.
					case 0: 
						cscore1 = GetActorProperty(pA, APROP_Score) - bscore1; 
						if (cscore1 > bestscore)
						{
							bestscore = cscore1;
							bestscore_player = pA;
						}
						break;
					case 1: 
						cscore2 = GetActorProperty(pA, APROP_Score) - bscore2; 
						if (cscore2 > bestscore)
						{
							bestscore = cscore2;
							bestscore_player = pA;
						}
						break;
					case 2: 
						cscore3 = GetActorProperty(pA, APROP_Score) - bscore3; 
						if (cscore3 > bestscore)
						{
							bestscore = cscore3;
							bestscore_player = pA;
						}
						break;
					case 3: 
						cscore4 = GetActorProperty(pA, APROP_Score) - bscore4; 
						if (cscore4 > bestscore)
						{
							bestscore = cscore4;
							bestscore_player = pA;
						}
						break;
					case 4: 
						cscore5 = GetActorProperty(pA, APROP_Score) - bscore5; 
						if (cscore5 > bestscore)
						{
							bestscore = cscore5;
							bestscore_player = pA;
						}
						break;
					case 5: 
						cscore6 = GetActorProperty(pA, APROP_Score) - bscore6; 
						if (cscore6 > bestscore)
						{
							bestscore = cscore6;
							bestscore_player = pA;
						}
						break;
					case 6: 
						cscore7 = GetActorProperty(pA, APROP_Score) - bscore7; 
						if (cscore7 > bestscore)
						{
							bestscore = cscore7;
							bestscore_player = pA;
						}
						break;
					case 7: 
						cscore8 = GetActorProperty(pA, APROP_Score) - bscore8; 
						if (cscore8 > bestscore)
						{
							bestscore = cscore8;
							bestscore_player = pA;
						}
						break;
				}
			}
		}
		//display msgs to players
		//this one has to be separate from the above one, so that all the scores are calculated properly.
		for (int pB = 7500; pB < 7508; pB++)
		{
			if (PlayerInGame(pB - 7500))
			{
				SetActivator(pB);
				if (bestscore <= 0) {HudMessage(l:"BEST_SCORE4"; HUDMSG_PLAIN, -123456785, CR_PURPLE, 160.0, 140.0, 6.5);}
				else if (bestscore_player == pB)
				{
					HudMessage(l:"BEST_SCORE3"; HUDMSG_PLAIN, -123456785, CR_PURPLE, 160.0, 140.0, 6.5);
				}
				else
				{
					int bplayernum = bestscore_player - 7499;
					HudMessage(l:"BEST_SCORE", d:bplayernum, l:"BEST_SCORE2", d:bestscore, s:")"; HUDMSG_PLAIN, -123456785, CR_PURPLE, 160.0, 140.0, 6.5);
				}
			}
		}
	}
	//onto the next party...
	Delay(17);
	HudMessageBold(l:"NEXT_PARTY"; HUDMSG_FADEINOUT, -123456786, CR_WHITE, 160.0, 160.0, 3.5, 0.5, 1.0);
	//countdown
	Delay(35);
	HudMessageBold(d:4; HUDMSG_PLAIN, -123456787, CR_PURPLE, 160.0, 170.0, 1.0);
	Delay(35);
	HudMessageBold(d:3; HUDMSG_PLAIN, -123456787, CR_PURPLE, 160.0, 170.0, 1.0);
	Delay(35);
	HudMessageBold(d:2; HUDMSG_PLAIN, -123456787, CR_PURPLE, 160.0, 170.0, 1.0);
	Delay(35);
	HudMessageBold(d:1; HUDMSG_PLAIN, -123456787, CR_PURPLE, 160.0, 170.0, 1.0);
	Delay(35);
	SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
	ACS_NamedExecuteAlways("exitnow", 0, 0, 0, 0);
}

script "exitnow" (void) {Exit_Normal(0);}

script "beatthedemo" (void)
{
	if (GetCVAR("demomode") == true)
	{
		ACS_NamedExecuteAlways("beatthegame", 0, 0, 0, 0);
	}
}

script "beatthegame" (void)
{
	//gives necessary unlocks for when you beat the story/demo as a specific character.
	for (int p = 7500; p < 7508; p++)
	{
		if (PlayerInGame(p - 7500))
		{
			if (CheckActorInventory(p, "PlayerBoxToken"))
			{
				box_gethat("box_hat_unlock_02", "box_unlockhat_02");
			}
			else if (CheckActorInventory(p, "PlayerCircleToken"))
			{	
				box_gethat("box_hat_unlock_03", "box_unlockhat_03");
			}
			else if (CheckActorInventory(p, "PlayerTriangleToken"))
			{
				box_gethat("box_hat_unlock_04", "box_unlockhat_04");
			}
			else if (CheckActorInventory(p, "PlayerTrioToken"))
			{
				box_gethat("box_hat_unlock_17", "box_unlockhat_17");
			}
			else if (CheckActorInventory(p, "PlayerPrismToken"))
			{
				box_gethat("box_hat_unlock_18", "box_unlockhat_18");
			}
			else if (CheckActorInventory(p, "PlayerGlassToken"))
			{
				box_gethat("box_hat_unlock_19", "box_unlockhat_19");
			}
		}
	}
}

//this script is activated when the pepper is killed by it's own attacks.
script "PepperUnlock" (void) {box_gethat("box_hat_unlock_14", "box_unlockhat_14");}

//script that handles unlocking the hat you get for getting 250 glowstick kills.
script "glowcounter" (void)
{
	if (GetWeapon() == "Glowstick") //not compatible with custom stuff but whatev's.
	{
		if (glowkill == 0) {glowkill = GetCVAR("box_hat_glowstick");}
		glowremain = glowmax - glowkill - 1;
	
		++glowkill;
		SetCVAR("box_hat_glowstick", glowkill);

		if (glowkill >= glowmax)
		{
			box_gethat("box_hat_unlock_13", "box_unlockhat_13");
		}
		else
		{
			if (random(1, 25) == 25) {Log(d:glowremain, l:"HAT_GLOWREMAIN");}
		}
	}
}

script "eggcounter" (void)
{
	if (eggkill == 0) {eggkill = GetCVAR("box_hat_egg");}
	
	++eggkill;
	SetCVAR("box_hat_egg", eggkill);

	if (eggkill >= eggmax)
	{
		box_gethat("box_hat_secret_16", "box_unlocksecret_16");
	}
}

SCRIPT "BoxJumpPad" (int jumpamount)
{
	//script for the green jump pads. use jumpamount to configure jump pad's strength.
	if (CheckFlag(0, "SOLID") == true)
	{
		int x = GetActorX(0);
		int y = GetActorY(0);
		int z = GetActorZ(0);
		SpawnForced("BoxSlam", x, y, z);
		ThrustThingZ(0, jumpamount, false, true);
		PlaySound(0, "effects/jumppad", 0, 0.35);
	}
}

script "watcher" (void)
{
	//just a fun little popup that appears in level 3 if you're fun enough.
	if (GetCVAR("box_fun") == 1)
	{
		ScriptCall("box_Achiever", "achieve", "youarebeingwatched");
	}
}

script "healplayer" (void) //simple and clean player healer. used just before boss fights.
{
	int maxhp = GetActorProperty(0, APROP_SpawnHealth);
	if (maxhp != 0) {SetActorProperty(0, APROP_Health, maxhp);}
}

script "activateself" (void)
{
	Thing_Activate(0);
}

script "selffreezer" (int isfreeze)
{
	if (isfreeze == 1)
	{
		SetPlayerProperty(0, 1, PROP_FROZEN);
	}
	else
	{
		SetPlayerProperty(0, 0, PROP_FROZEN);
	}
}

script "returnhook" (void)
{
	if (CheckActorClass(0, "fishinghook") == true)
	{
		SetActorState(0, "Returning", false);
	}
}

script "RemoveFishingRod" (void)
{
	TakeInventory("FishingRod", 1);
}

script "hatpage1check" ENTER
{
	int hats = 0;
	if (!GetCVAR("box_hat_unlock_15"))
	{
		if (GetCVAR("box_hat_unlock_02")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_03")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_04")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_05")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_06")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_07")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_08")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_09")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_10")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_11")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_12")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_13")) {hats += 1;}
		if (GetCVAR("box_hat_unlock_14")) {hats += 1;}
		if (hats == 13)
		{
			box_gethat("box_hat_unlock_15", "box_unlockhat_15");
		}
	
		Delay(70);
		Restart;
	}
}

script "pacifistitem" ENTER
{
	if (ACS_NamedExecuteAlways("pacifismcheck", 0, 0, 0, 0) == false)
	{
		GiveActorInventory(0, "PacifistCheck", 1); //NPC's will check this item if they have pacifist dialogue. If the player is NOT pacifist, this will make the NPC show normal dialogue.
	}
}

script "pacifismcheck" (void)
{
	int murdercount;
	for (int p = 7500; p < 7508; p++)
	{
		if (PlayerInGame(p - 7500))
		{
			murdercount += CheckActorInventory(p, "MurderCount");
		}
	}
	
	if (murdercount > 0) {SetResultValue(false);}
	else if (GetCVAR("nopacifism") == true) {SetResultValue(false);}
	else {SetResultValue(true);}
}

function void DOptionCheck (void)
{
	int modifiers;
	if (GetCVAR("box_glowstart") == true) {modifiers += 1;}
	if (GetCVAR("box_doubleammo") == true) {modifiers += 1;}
	if (GetCVAR("box_foodhp") != 1) {modifiers += 1;}
	if (GetCVAR("box_fooddamage") != 1) {modifiers += 1;}
	if (GetCVAR("box_foodchance") != 1) {modifiers += 1;}
	if (GetCVAR("box_ammochance") != 1) {modifiers += 1;}
	int scorenum = CheckActorInventory(ActivatorTID(), "ScoreRemover");

	if (modifiers > 0) 
	{
		str codeword = "MODIFIERSON";
		if (modifiers == 1)	{codeword = "MODIFIERON";}
		HudMessage(s: "\n\n\n\n\n\n", d:modifiers, l:codeword; HUDMSG_TYPEON, -4, CR_PURPLE, 0.5, 0.675, 2.50, 0.05, 1.0);
		HudMessage(s: "\n\n\n\n\n\n\n\n\n-", d:scorenum, l:"SCOREDRAIN"; HUDMSG_TYPEON, -5, CR_BRICK, 0.5, 0.675, 2.50, 0.05, 1.0);
	}
}


////////////
///QUESTS///
////////////

//i would like to replace the UI for this with ZScript in the future, but for now it is out of my league.

script "ShowSideQuests" (int QuestEnabled) net
{
	//Explanation: Player calls a script named "CheckSideQuests" via keybind. This script is defined on a per-level basis.
	//The level script will then call this script, and give it all of the variables that need to be displayed.
	
	if (QuestEnabled != 0)
	{
		if (SideQuestChecker() == false) {ACS_NamedExecuteAlways("UpdateSideQuests", 0, 0, 0, 0);}
		else {ACS_NamedExecuteAlways("ForceHideQuests", 0, 0, 0, 0);}
	}
	else {Log(l:"QUEST_UNAVAILABLE");}
}

script "UpdateSideQuests" (void)
{
	SetHudSize(640, 480, false);
	int questx = 180.1;
	int questy = 396.0;
	HudMessage(l:quest1_name; HUDMSG_PLAIN, -123456771, CR_UNTRANSLATED, questx, questy, 0, 1.0);
	HudMessage(l:quest1_progress; HUDMSG_PLAIN, -123456772, CR_UNTRANSLATED, questx + 4.0, questy + 10.0, 0, 1.0);
	HudMessage(l:quest2_name; HUDMSG_PLAIN, -123456773, CR_UNTRANSLATED, questx, questy + 26.0, 0, 1.0);
	HudMessage(l:quest2_progress; HUDMSG_PLAIN, -123456774, CR_UNTRANSLATED, questx + 4.0, questy + 36.0, 0, 1.0);
	HudMessage(l:quest3_name; HUDMSG_PLAIN, -123456775, CR_UNTRANSLATED, questx, questy + 52.0, 0, 1.0);
	HudMessage(l:quest3_progress; HUDMSG_PLAIN, -123456776, CR_UNTRANSLATED, questx + 4.0, questy + 62.0, 0, 1.0);
			
	SetHudSize(320, 240, false);
	SetFont("QUESTBOX");
	HudMessage(s:"A"; HUDMSG_PLAIN, -123456770, CR_UNTRANSLATED, 164.0, 214.0, 0, 1.0);
			
	//togglesidequests = true;
	SideQuestToggler(true);
}

script "ForceHideQuests" (void)
{
	HudMessage(s:""; HUDMSG_PLAIN, -123456770, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456771, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456772, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456773, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456774, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456775, CR_UNTRANSLATED, 0, 0, 1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, -123456776, CR_UNTRANSLATED, 0, 0, 1, 1.0);
			
	//togglesidequests = false;
	SideQuestToggler(false);
}

function void QuestProgressed (int QNum, str QMsg, bool DoReward)
{
	//quick and easy to use function to update progress for a quest.
	
	//note: quest names and progression can be updated without this function.
	//this just automates the process for most normal quests.
	
	switch (QNum)
	{
		case 0: quest1_progress = QMsg; break;
		case 1: quest2_progress = QMsg; break;
		case 2: quest3_progress = QMsg; break;
	}
	
	
	if (DoReward == true) {GiveInventory("BoxQuestReward", 1500); qdone += 1;}
	
	QuestUpdated(true);
}

function void QuestUpdated (bool QuestLog)
{
	//displays a "side quest updated" message, and updates the Quest UI if it is open.
	//useful if you are changing quests without the use of the above function.
	
	if (QuestLog == true) {Log(l:"QUESTUPDATED"); AmbientSound("effects/quest", 127);}
	
	for (int act = 7500; act < 7508; act++)
	{
		SetActivator(act);
	
		if (SideQuestChecker() == true) {ACS_NamedExecuteAlways("UpdateSideQuests", 0, 0, 0, 0);}
		else {ACS_NamedExecuteAlways("ForceHideQuests", 0, 0, 0, 0);}
	}
}

function void SideQuestToggler (bool QToggle)
{
	switch (ActivatorTID())
	{
		case 7500: togglesidequests_0 = QToggle; break;
		case 7501: togglesidequests_1 = QToggle; break;
		case 7502: togglesidequests_2 = QToggle; break;
		case 7503: togglesidequests_3 = QToggle; break;
		case 7504: togglesidequests_4 = QToggle; break;
		case 7505: togglesidequests_5 = QToggle; break;
		case 7506: togglesidequests_6 = QToggle; break;
		case 7507: togglesidequests_7 = QToggle; break;
		default: break;
	}
}

function bool SideQuestChecker (void)
{
	bool returnvalue;

	switch (ActivatorTID())
	{
		case 7500: returnvalue = togglesidequests_0; break;
		case 7501: returnvalue = togglesidequests_1; break;
		case 7502: returnvalue = togglesidequests_2; break;
		case 7503: returnvalue = togglesidequests_3; break;
		case 7504: returnvalue = togglesidequests_4; break;
		case 7505: returnvalue = togglesidequests_5; break;
		case 7506: returnvalue = togglesidequests_6; break;
		case 7507: returnvalue = togglesidequests_7; break;
		default: break;
	}
	
	return returnvalue;
}