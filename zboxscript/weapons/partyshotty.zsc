//zboxscript/weapons/partyshotty.zsc

//zscript code for the party shotgun and its ammo.

//fun fact: this is actually the first weapon ive ever coded.
//quite happy with this one. :)

CLASS PartyShottyAmmo : Ammo //20008
{
	Default
	{
		Radius 20;
		Height 24;
		Inventory.PickupMessage "$BOX_AMMO_SHOT";
		Inventory.Amount 4;
		Inventory.MaxAmount 16;
		Inventory.Icon "SHOTY0";
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 24;
		+CASTSPRITESHADOW;
		+COUNTITEM;
		//partyshotty (AKA snack blaster, as it's called ingame) shoots out 6 pellets at once, giving you 40 total shots without a backpack.
		
		//$Category "Box Party/Ammo"
		//$Title "PartyShotty Ammo (Snack Mix)"
		//$Color 19
	}
	
	States
	{
		Spawn:
			SHOT Y -1;
			Stop;
	}
}

CLASS PartyShottyAmmoDrop : PartyShottyAmmo
{
	mixin BoxActorMixin;

	Default
	{
		+FLOATBOB;
		-COUNTITEM;
	}

	int FadeNum;

	States
	{
		Spawn:
			LOOT EEEFFFEEEFFFEEEFFF 10 BRIGHT A_BoxParticle2("ff ec 42", random(1, 2), 12, 24, POffset: 8.0, POffsetZ: frandom(0.0, 4.0), PSpeed: 2.0, PBright: true);
			#### # 0
			{
				FadeNum += 1;
				if (FadeNum == 2) {A_BoxParticle("ff ec 42", 8, 12, 24);}
			}
			LOOT F 0 A_FadeOut(0.5);
			Loop;
	}
}

CLASS PartyShotty : Weapon //20009
{
	//the primary fire shoots out a volley of 6 snack mix pellets that each do 10 damage.
	//the secondary fire is a melee attack, which is slower than the glowstick attack, but does double damage.
	//i may or may not change the secondary fire to something else later.

	Default
	{
		Radius 20;
		Height 24;
		Weapon.SelectionOrder 1000;
		Weapon.Kickback 200;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 4;
		Weapon.AmmoType "PartyShottyAmmo";
		DamageType "PartyShot";
		Inventory.PickupMessage "$BOX_WEAPON_SHOT";
		Inventory.Icon "AMMOI0";
		Inventory.AltHUDIcon "AMMOB0";
		Obituary "$BOX_DIE_SHOT";
		Tag "$BOX_TAG_SHOT";
		+WEAPON.ALT_USES_BOTH;
		+CASTSPRITESHADOW;
		+COUNTITEM;
		//$Category "Box Party/Weapons"
		//$Title "PartyShotty (Obligatory Shotgun)"
		//$Color 9
	}
	
	action void A_BoxPartyShoot (void)
	{
		A_FireProjectile("PartyShottyBullet", frandom(-2, 2), 1, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-2, 2), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-2, 2), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-4, 4), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-4, 4), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-4, 4), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottySmoke", 0, 0, -4, 12, FPF_AIMATANGLE, 0);
		A_StartSound("Weapons/PartyShotty/SHOTFIRE", CHAN_WEAPON);
	}
	
	action void A_BoxPartyShootAlt (void)
	{
		A_FireProjectile("PartyShottyBullet", frandom(-6, 6), 1, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-6, 6), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-6, 6), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-12, 12), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-12, 12), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottyBullet", frandom(-12, 12), 0, -4, 4, FPF_AIMATANGLE, frandom(-4, 4));
		A_FireProjectile("PartyShottySmoke", 0, 0, -4, 12, FPF_AIMATANGLE, 0);
		A_StartSound("Weapons/PartyShotty/SHOTFIRE", CHAN_WEAPON);
	}
	
	States
	{
		Ready:
			SHOT A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHOT A 0 A_Lower;
			SHOT A 1 A_Lower;
			Loop;
		Select:
			SHOT A 0 A_Raise;
			SHOT A 1 A_Raise;
			Loop;
		Fire:
			SHOT B 0;
			SHOT B 0 A_JumpIfInventory("PartyShottyAmmo", 1, 2);
			SHOT B 0 A_Jump(256, 2);
			SHOT B 0 A_BoxPartyShoot();
			SHOT B 1 A_WeaponOffset(-15, 35, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-20, 40, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-10, 30, WOF_INTERPOLATE);
			SHOT B 2 A_WeaponOffset(0, 20, WOF_INTERPOLATE);
			SHOT A 12;
			SHOT E 0 A_StartSound("Weapons/PartyShotty/SHOTLOAD", CHAN_WEAPON);
			SHOT E 5 A_WeaponOffset(-5, 24, WOF_INTERPOLATE);
			SHOT E 5 A_WeaponOffset(-13, 36, WOF_INTERPOLATE);
			SHOT A 5 A_WeaponOffset(-9, 28, WOF_INTERPOLATE);
			SHOT A 0 A_Refire;
			SHOT A 5 A_WeaponOffset(-1, 20, WOF_INTERPOLATE);
			Goto Ready;
		AltFire:
			SHOT B 0;
			SHOT B 0 A_JumpIfInventory("PartyShottyAmmo", 1, 2);
			SHOT B 0 A_Jump(256, 2);
			SHOT B 0 A_BoxPartyShootAlt();
			SHOT B 1 A_WeaponOffset(-15, 35, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-20, 40, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-10, 30, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(0, 20, WOF_INTERPOLATE);
			SHOT A 1;
			SHOT B 0 A_JumpIfInventory("PartyShottyAmmo", 1, 2);
			SHOT B 0 A_Jump(256, 2);
			SHOT B 0 A_BoxPartyShootAlt();
			SHOT B 1 A_WeaponOffset(-15, 35, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-20, 40, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-10, 30, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(0, 20, WOF_INTERPOLATE);
			SHOT A 1;
			SHOT B 0 A_JumpIfInventory("PartyShottyAmmo", 1, 2);
			SHOT B 0 A_Jump(256, 2);
			SHOT B 0 A_BoxPartyShootAlt();
			SHOT B 1 A_WeaponOffset(-15, 35, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-20, 40, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(-10, 30, WOF_INTERPOLATE);
			SHOT B 1 A_WeaponOffset(0, 20, WOF_INTERPOLATE);
			SHOT A 16;
			SHOT E 0 A_StartSound("Weapons/PartyShotty/SHOTLOAD", CHAN_WEAPON);
			SHOT E 5 A_WeaponOffset(-5, 24, WOF_INTERPOLATE);
			SHOT E 5 A_WeaponOffset(-13, 36, WOF_INTERPOLATE);
			SHOT A 5 A_WeaponOffset(-9, 28, WOF_INTERPOLATE);
			SHOT A 0 A_Refire;
			SHOT A 5 A_WeaponOffset(-1, 20, WOF_INTERPOLATE);
			Goto Ready;
		Spawn:
			SHOT Z -1;
			Stop;
	}
}

CLASS PartyShottyBullet : BoxActor
{
	//basic projectile. uses damagefunction instead of damage so that the damage is never randomized.

	Default
	{
		Mass 0;
		Gravity 0;
		Radius 4;
		Height 8;
		Speed 40;
		DamageFunction (12);
		DamageType "PartyShot";
		Projectile;
		+BLOODSPLATTER;
		//+INTERPOLATEANGLES;
		+ROLLSPRITE;
		+SPRITEANGLE;
		+FORCEXYBILLBOARD;
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		BoxStartRoll();
	}
	
	action void FakeShottyCrumb()
	{
		A_SpawnParticleEX("White", TexMan.CheckForTexture("SHOTX0"), 0, SPF_ROLL, 24, 4.0, random(0, 359), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 3), 0, 0, -0.33, 1, 0, -0.16, random(0, 359), 3 - (6 * (random(0, 1))));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256, "Firsty", "Secondy", "Thirdy");
			Stop;
		Firsty:
			SHOT U 1;
			goto SpeenStart;
		Secondy:
			SHOT V 1;
			goto SpeenStart;
		Thirdy:
			SHOT W 1;
			goto SpeenStart;
		SpeenStart:
			"####" "#" 1 A_SetRoll(roll + StartRoll);
			Loop;
		Death.Sky:
		Death:
			TNT1 A 1 {
				//A_SpawnItemEx("ProjectileSmoke", 0, 0, 0, 0, 0, 0);
				//A_BoxParticle("7b 49 2b", 3);
				A_ProjectileSmoke();
				FakeShottyCrumb();
				FakeShottyCrumb();
				FakeShottyCrumb();
				A_SpawnItemEx("PartyShottyBulletCrumb", random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 1), random(0, 359), 0, 192);
			}
			Stop;
	}
}

CLASS PartyShottySmoke : BoxActor
{
	//the puff that comes from your gun when you fire it.
	//ive tried my best to make the smoke as unobnoxious as possible.

	Default
	{
		Gravity 0;
		Speed 5;
		Radius 2;
		Height 4;
		Mass 0;
	
		-SOLID;
		-BLOCKEDBYSOLIDACTORS;
		+MISSILE;
		+INTERPOLATEANGLES;
		+ROLLSPRITE;
		+SPRITEANGLE;
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			SMOK A 0 A_FadeOut(0.95);
			SMOK A 1 A_Jump(128, "SpeenLeft");
		SpeenRight:
			"####" "#" 1 A_SetRoll(roll - 3);
			"####" "#" 0 A_FadeOut(0.01);
			Loop;
		SpeenLeft:
			"####" "#" 1 A_SetRoll(roll + 3);
			"####" "#" 0 A_FadeOut(0.01);
			Loop;
		Death:
			"####" "#" 0 A_FadeOut(0.01);
			Stop;
	}
}

CLASS PartyShottyBulletCrumb : BoxCrumb
{
	//snack pellet breaks into 3 crumbs upon death.

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			SHOT X 0 A_QueueCorpse;
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}