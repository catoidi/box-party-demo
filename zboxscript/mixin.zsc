//zboxscript/mixin.zsc

//mixin was getting super large so it's now moved into a separate file.

mixin class BoxActorMixin
{
	int IsMelee;
	bool IsPrism;
	float FakeFade;
	float BoxScale_AmountX;
	float BoxScale_AmountY; //just giving these 2 a long convoluted name to make sure it doesn't get used/confused for anything else cuz they're kinda important maybe idk 
	
	actor shocktarget;
	
	double LootAmmoMult;
	double LootHPMult;
	
	int BurnAmount;
	int BurnTimer;
	
	int StartRoll;
	void BoxStartRoll (void)
	{
		self.Roll = random(0, 359);
		bINTERPOLATEANGLES = true;
		StartRoll = randompick(-8, 8);
	}
	
	action bool BoxHammerCheck(void)
	{
		//used to check if there is room to dash before dashing.
	
		//this is probably really inefficient.
		
		double radnum = self.radius;
		
		if 
		(
			(CheckBlock(0, AAPTR_DEFAULT, radnum, 0, 0, 0) == true) || 
			(CheckBlock(0, AAPTR_DEFAULT, (radnum * 2.0), 0, 0, 0) == true)
		)
		{
			return true;
		}
		else {return false;}
	}
	
	action void A_BoxBulletTrail (void)
	{
		A_SpawnItemEX("BulletTrail", -1, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_TRANSFERTRANSLATION | SXF_NOCHECKPOSITION | SXF_TRANSFERSCALE | SXF_TRANSFERALPHA | SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERROLL);
	}
	
	action void A_BoxFade (float FadeNum = 0.1)
	{
		//name's a little misleading, actor does not start fading until FakeFade reaches 0.75 or higher.
		if (invoker)
		{
			let NewFade = invoker.FakeFade + FadeNum;
			let ActualFade = (NewFade - 0.75) * 4;
			if (ActualFade >= 1.0) {A_FadeTo(0.0, flags: FTF_REMOVE);}
			else if (ActualFade > 0.0)
			{
				A_Fadeto(ActualFade, flags: FTF_REMOVE);
				invoker.Scale.X = invoker.Scale.X * (1.0 - ActualFade);
				invoker.Scale.Y = invoker.Scale.Y * (1.0 - ActualFade);
				invoker.FakeFade = NewFade;
			}
			else {invoker.FakeFade = NewFade;}
		}
	}
	
	action void A_BoxParticle (string PColor = "ff ff ff", int PAmount = 1, int PSize = 5, int PTime = 16, float POffset = 0.0, float PSpeed = 4.0, bool PBright = false)
	{
		//simplifies making particle effects for stuff.
		
		int pflags = 0;
		if (PBright == true) {pflags = SPF_FULLBRIGHT;}
	
		for (int PTimer = 0; PTimer < PAmount; ++PTimer)
		{
			A_SpawnParticle(PColor, pflags, PTime, PSize, 0, frandom(-POffset, POffset), frandom(-POffset, POffset), frandom(-POffset, POffset), frandom(-PSpeed, PSpeed), frandom(-PSpeed, PSpeed), frandom(-PSpeed, PSpeed), 0, 0, 0, 1.0, -1, -(1.0 * PSize / PTime));
		}
	}
	
	action void A_BoxParticle2 (string PColor = "ff ff ff", int PAmount = 1, int PSize = 5, int PTime = 16, float POffset = 0.0, float POffsetZ = 0.0, float PSpeed = 4.0, bool PBright = false)
	{
		//like a_boxparticle, but the particle only goes up/down. (speed is somewhat random.)
		
		int pflags = 0;
		if (PBright == true) {pflags = SPF_FULLBRIGHT;}
	
		for (int PTimer = 0; PTimer < PAmount; ++PTimer)
		{
			A_SpawnParticle(PColor, pflags, PTime, PSize, 0, frandom(-POffset, POffset), frandom(-POffset, POffset), POffsetZ, 0, 0, frandom((PSpeed * 0.8), (PSpeed * 1.2)), 0, 0, 0, 1.0, -1, -(1.0 * PSize / PTime));
		}
	}
	
	action void A_BoxParticleEX (string PexSprite, int PAmount = 1, int PSize = 5, int PTime = 16, float POffset = 0.0, float PSpeed = 4.0, bool PBright = false, bool PRotate = true)
	{
		//behaves exactly like a_boxparticle, but uses a textured particle instead.
		
		int pflags = SPF_ROLL;
		if (PBright == true) {pflags = SPF_ROLL | SPF_FULLBRIGHT;}
	
		for (int PTimer = 0; PTimer < PAmount; ++PTimer)
		{
			int PRoll = 0;
			if (PRotate == true) {PRoll = random(0, 359);} 
			A_SpawnParticleEX("White", TexMan.CheckForTexture(PexSprite), pflags, PTime, PSize, 0, frandom(-POffset, POffset), frandom(-POffset, POffset), frandom(-POffset, POffset), frandom(-PSpeed, PSpeed), frandom(-PSpeed, PSpeed), frandom(-PSpeed, PSpeed), 0, 0, 0, 1.0, -1, -(1.0 * PSize / PTime), PRoll);
		}
	}
	
	action void A_BoxParticleEX2 (string PexSprite, int PAmount = 1, int PSize = 5, int PTime = 16, float POffset = 0.0, float POffsetZ = 0.0, float PSpeed = 4.0, bool PBright = false, bool PRotate = true)
	{
		//it's just like a_boxparticle2, but uses a textured particle instead.
		
		int pflags = SPF_ROLL;
		if (PBright == true) {pflags = SPF_ROLL | SPF_FULLBRIGHT;}
	
		for (int PTimer = 0; PTimer < PAmount; ++PTimer)
		{
			int PRoll = 0;
			if (PRotate == true) {PRoll = random(0, 359);} 
			A_SpawnParticleEX("White", TexMan.CheckForTexture(PexSprite), pflags, PTime, PSize, 0, frandom(-POffset, POffset), frandom(-POffset, POffset), POffsetZ, 0, 0, frandom((PSpeed * 0.8), (PSpeed * 1.2)), 0, 0, 0, 1.0, -1, -(1.0 * PSize / PTime), PRoll);
		}
	}
	
	action void A_BoxGib (string Gibber, int GAmount = 1, int GMode = 0, int GFail = 0, double GOM = 1.0, double GSM = 1.0)
	{
		double GRadius = invoker.Radius / 2;
		double GHeight = invoker.Height;
		double GSpeed =  4 + (invoker.Radius * 0.35);
		double GSpeed2 = GHeight;
		
		//default GMode is gib mode.
		if (GMode == 1) //chunk mode
		{
			GRadius *= 0.6;
			GSpeed *= 1.25;
			GSpeed2 *= 1.15;
		}
		else if (GMode == 2) //blood/crumb mode
		{
			GRadius *= 0.25;
			GSpeed *= 1.6;
			GSpeed2 *= 1.15;
		}
			
		for (int i = 0; i < GAmount; ++i)
		{
			double GOX = (frandom(-GRadius, GRadius)) * GOM;
			double GOY = (frandom(-GRadius, GRadius)) * GOM;
			double GOZ = (frandom(GHeight / 2, GHeight)) * GOM;
			double GSX = (frandom(-GSpeed, GSpeed)) * GSM;
			double GSY = (frandom(-GSpeed, GSpeed)) * GSM;
			double GSZ = (frandom(GSpeed2 / 3, GSpeed2)) * GSM;
		
			A_SpawnItemEX(
				Gibber, 
				GOX, GOY, GOZ, GSX, GSY, GSZ,
				random(0, 359), 
				SXF_ORIGINATOR | SXF_TRANSFERSCALE | SXF_NOCHECKPOSITION,
				GFail
			);
		}
	}

	action void A_BoxScale (double ScaleAmount, bool IsMultiply = false, bool DoSize = false)
	{
		//read below.
		A_BoxScaleXY(ScaleAmount, ScaleAmount, IsMultiply, DoSize);
	}

	action void A_BoxScaleXY (double ScaleAmountX, double ScaleAmountY, bool IsMultiply = false, bool DoSize = false)
	{
		if (invoker)
		{
			if (IsMultiply == false)
			{
				//don't ask.
				invoker.Scale.X += ScaleAmountX;
				invoker.Scale.Y += ScaleAmountY;
			}
			else
			{
				invoker.Scale.X = invoker.Scale.X * ScaleAmountX;
				invoker.Scale.Y = invoker.Scale.Y * ScaleAmountY;
			}
			
			if (DoSize == true)
			{
				double r = invoker.Scale.X * invoker.default.Radius;
				double h = invoker.Scale.Y * invoker.default.Height;
				invoker.A_SetSize(r, h);
			}
		}
	}
	
	action void A_ResetScale (bool DoSize = false)
	{
		if (invoker)
		{
			//read above.
			invoker.Scale.X = invoker.default.Scale.X;
			invoker.Scale.Y = invoker.default.Scale.Y;
			
			if (DoSize == true) {invoker.A_SetSize(invoker.default.Radius, invoker.default.Height);}
		}
	}
	
	action void A_BoxSpawnLoot (string SpawnItem, int FailChance) 
	{
		//helps to reduce duplicate code.
		//tries to spawn loot drops outside the radius of actor so player has room to pick em up.
		if (invoker)
		{
			double BoxHeight = invoker.Height / 2;
			double BoxSpeed = invoker.Radius / 10;
			A_SpawnItemEX(SpawnItem, 0, 0, BoxHeight, BoxSpeed, 0, frandom(6, 10), random(0, 359), SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS, FailChance);
		}
	}
	
	action void A_BoxBurned (int BurnMode)
	{
		//copy/pasted a lot from A_BoxShocked.
		if (invoker)
		{
			double BoxRadius = invoker.Radius / 4;
			
			if (BurnMode == 0)
			{
				A_SpawnItemEX("BurnEffectSmall", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), 0, 0, 0, frandom(1, 4), 0, SXF_ORIGINATOR | SXF_NOCHECKPOSITION);
			}
			else
			{
				if (self.target != null)	{invoker.shocktarget = self.target;}
			
				A_SpawnItemEX("BurnEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), 0, 0, 0, frandom(1, 4), 0, SXF_ORIGINATOR | SXF_NOCHECKPOSITION);
				if (self.health > 5) {self.health -= 5;}
				else if (self.health <= 5) {A_Die("Fire");}
				A_Pain();
				if (invoker.shocktarget != null) {self.target = invoker.shocktarget;}
			}
		}
	}
	
	action void A_BoxShocked (void)
	{
		//This is the effect that plays when the enemy is stunned by a shock attack.
		if (invoker)
		{
			double BoxHeight = invoker.Height * 0.75;
			double BoxRadius = invoker.Radius / 4;
			double BoxSpeed = (BoxRadius / 24) + 2;
			
			if (self.target != null)	{invoker.shocktarget = self.target;}
			
			A_SpawnItemEX("ShockEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			if (self.health > 3) {self.health -= 3;}
			else if (self.health <= 3) {A_Die("Lightning");}
			A_Pain();
			if (invoker.BurnAmount > 0) //extra damage if on fire
			{
				A_SpawnItemEX("BurnEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), 0, 0, 0, frandom(1, 4), 0, SXF_ORIGINATOR | SXF_NOCHECKPOSITION);
				if (self.health > 6) {self.health -= 6;}
				else if (self.health <= 6) {A_Die("Lightning");}
			}
			if (invoker.shocktarget != null) {self.target = invoker.shocktarget;}
		}
	}
	
	action void A_BoxShockedBig (void)
	{
		//This is the effect that plays when the enemy is stunned by a shock attack.
		if (invoker)
		{
			double BoxHeight = invoker.Height * 0.4;
			double BoxRadius = invoker.Radius / 4;
			double BoxSpeed = (BoxRadius / 24) + 2;
			
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			A_SpawnItemEX("ShockEffectBig", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(1, 4), 0, SXF_ORIGINATOR, 64);
			//A_DamageSelf(150);
			if (self.health > 150) {self.health -= 150;}
			else if (self.health <= 150) {A_Die("Lightning");}
			A_Pain();
			if (invoker.BurnAmount > 0) //extra damage if on fire
			{
				A_SpawnItemEX("BurnEffect", frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), 0, 0, 0, frandom(1, 4), 0, SXF_ORIGINATOR | SXF_NOCHECKPOSITION);
				if (self.health > 50) {self.health -= 50;}
				else if (self.health <= 50) {A_Die("Lightning");}
			}
		}
	}
	
	action void A_BoxDecor (bool Flipping, double MinScale, double MaxScale, double MaxFade)
	{
		//reduces the amount of copy/paste code for decoration items by performing 3 basic functions in one.
		if (invoker)
		{
			int RandomFlip = random(0, 1);
			if ((Flipping == true) && (RandomFlip == 1)) {bSPRITEFLIP = true;}
			if ((MinScale != 1.0) && (MaxScale != 1.0)) {A_BoxScale(frandom(MinScale, MaxScale), true);}
			if (MaxFade != 0) {A_FadeOut(frandom(0, MaxFade));}
		}
	}

	
	action void A_BoxStars (string StarActor = "MeleeStars", int StarAmount = 4)
	{
		//Creates a star affect above the enemy's head to specify when they've been stunned by a melee attack.
		//That's it.
		if (invoker)
		{
			double BoxHeight = invoker.Height * 0.75;
			double BoxRadius = invoker.Radius / 3;
			double BoxSpeed = BoxRadius / 6;
			
			for (int snum = 0; snum < StarAmount; snum++)
			{A_SpawnItemEX(StarActor, frandom(-BoxRadius, BoxRadius), frandom(-BoxRadius, BoxRadius), BoxHeight, frandom(-BoxSpeed, BoxSpeed), frandom(-BoxSpeed, BoxSpeed), frandom(3, 8), 0, SXF_NOCHECKPOSITION);}
		}
	}

	action void A_BoxDropLoot (string ItemSuffix, int ItemDrops, bool ForceHealth = false)
	{
		//the point of this is to simplify the process of making enemies drop health items when they die.
		//WARNING: Don't use this on the first tic of the enemy's pain or death state!
		//This depends on the enemy targetting the player, so if this is called on the first tic, the enemy won't have time to target the player before the function is called.
		
		//Intended Use:
		//1: Place action on frame where monster is supposed to drop it's loot.
		//2: Type the prefix of the loot item in "ItemPrefix". So, if the prefix was "Melon", this will generate items like "MelonHealth" and "MelonArmor".
		//3: Type the absolute minimum amount of items the monster can drop here (that's not zero), before being affected by health multipliers and melee bonuses. Most monsters have this set to one.
		//4: Lastly, all box party monsters use an integer called "IsMelee" that is either 0 or 1, depending on whether or not the monster was killed with a melee attack.
		//5: If killed via the Prism Weapon Blast, the enemy will be forced to drop health items instead of the usual drops.

		//Alternate Mode:
		//-If you want to spawn a very specific amount of an item, set the number for ItemDrops to a negative number.
		//-This mode will ignore whatever is set for MeleeBonus, and will ignore the Target's HP.
		//-This is great if you want a certain action to have a guaranteed chance to drop a specific amount of drops.
		
		let TargetHP = 0;
		string ItemPrefix = "BoxLooter_";
		string ItemDropping = string.Format("%s%s", ItemPrefix, ItemSuffix);
		
		cvar ammocvar = cvar.FindCVAR('box_ammochance');
		cvar foodcvar = cvar.FindCVAR('box_foodchance');
		double multnum[5] = {0.5, 1.0, 2.0, 3.0, 0.0};
		double ammomult = multnum[ammocvar.GetInt()];
		double foodmult = multnum[foodcvar.GetInt()];

		if ((target != null) && (target is "PlayerPawn")) {TargetHP = target.CountInv("LootHPNum");}
		
		//Failsafe.
		if (TargetHP < 0) {TargetHP = 0;}
		
		if (invoker)
		{
			//Food/Ammo Multiplier CVAR.
			int foodrandom = 1;
			if (FoodMult == 0.5) {FoodMult = 1.0; foodrandom = 2;}
			int ammorandom = 1;
			if (AmmoMult == 0.5) {AmmoMult = 1.0; ammorandom = 2;}
		
			//Loot drop amount calculations.
			double LootAmount = (ItemDrops + invoker.IsMelee) * FoodMult * TargetHP;
			
			//Alternate mode calculations.
			if (ItemDrops < 0) {LootAmount = -ItemDrops;} 
			
			if (ForceHealth == true)
			{
				ItemDropping.AppendFormat("%s", "_Forced");
			}
			
			//Health Dropper.
			for (int DropAmount = 0; DropAmount < LootAmount; ++DropAmount)	
			{
				if ((random(1, foodrandom) == 1) && (FoodMult > 0)) {A_BoxSpawnLoot(ItemDropping, 0);}
			}

			//Ammo Dropper.
			if ((target) && (ItemDrops >= 0)) 
			{
				for (int i = 0; i < AmmoMult; ++i)
				{
					if ((random(1, ammorandom) == 1) && (AmmoMult > 0)) {A_BoxSpawnLoot("BoxFakeAmmoDrop", 0);}
				}
			}
		}		
	}

	action void A_BoxDropAmmo (int ItemDrops, bool ExtraDrop = false)
	{
		//guaranteed drops of any ammo type
		//replaces ammo for missing weapons with glowstick ammo
		//for use during stuff like boss fights
		
		cvar ammocvar = cvar.FindCVAR('box_ammochance');
		int multnum[5] = {-1, 1, 2, 3, 0};
		int ammomult = multnum[ammocvar.GetInt()];
		int ammorandom = 1;
		if (AmmoMult == -1) {AmmoMult = 1; ammorandom = 2;}
		
		int TrueItemDrops = ItemDrops * AmmoMult;
		
		if (invoker)
		{
			string LootName = "BoxFakeAmmoDropForced";
			if (ExtraDrop) {LootName = "BoxFakeAmmoDrop";}
			for (int CDrop = 0; CDrop < TrueItemDrops; ++CDrop)
			{
				A_BoxSpawnLoot(LootName, 0);
			}
		}
	}
	
	override void BeginPlay(void)
	{
		Super.BeginPlay();
		
		A_BoxScale(0, false, true); //match actor's hitbox to scale set via map editor.
	}
}

mixin class BoxInvisibleActor
{
	//for enemies that should only be visible in reflections.
	Default
	{
		+ONLYVISIBLEINMIRRORS;
	}
	
	//remove invisibility on death.
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		bONLYVISIBLEINMIRRORS = false;
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}
}
