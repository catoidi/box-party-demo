class boxparty_ZF_HatMenuHandler : boxparty_ZF_Handler
{
	boxparty_HatMenu link;
	
	override void buttonClickCommand (boxparty_ZF_Button caller, Name command)
    {
		cvar hatsetting = cvar.FindCVAR('box_hat_current');
		cvar hatcheatmode = cvar.FindCVAR('box_hat_cheat');
		cvar hatunlocked;
		int labelnum;
		int pagenum = link.hatPage;
		string commandstring = command;
	
        if (commandstring.Left(5) == "DoHat")
        {
			let comnumber = commandstring.Mid(5, 6);
			labelnum = comnumber.ToInt(10);
			if (labelnum != 0) {labelnum += ((pagenum - 1) * 15);}
			string unlockstring;
			bool missinghat;
			if ((labelnum <= link.BOXHAT_size) && (labelnum != 0)) 
			{
				unlockstring = link.BOXHAT_cvar[labelnum - 1];
				hatunlocked = cvar.FindCVAR(unlockstring);
			}
			else if (labelnum == 0)
			{
				hatunlocked = cvar.FindCVAR('box_hat_unlock_00');
			}
			else {missinghat = true;}
			
			
			
			if (missinghat == true) {link.updateLabel(false, Stringtable.Localize("$HAT_MISSING"));}
			else if ((labelnum >= 1) && (link.BOXHAT_cvar[labelnum - 1] == "box_hat_unlock_16") && (hatunlocked.GetBool() == false))
			{
				//link.aLabel.text = Stringtable.Localize("$HAT_UNLOCK_16");
				link.aLabel.setText(string.Format("%s %s", Stringtable.Localize("$BOX_TITLE"), Stringtable.Localize("$HAT_UNLOCK_16")));
				console.printf("\cd%s %s", stringtable.localize("$BOX_TITLE"), stringtable.localize("$HAT_UNLOCK_16"));
				link.aLabel.settextColor(Font.CR_GREEN);
				hatunlocked.SetBool(true);
				let newbuttonimage = link.ButtonImage1;
				if (labelnum != 16)
				{
					switch (comnumber.ToInt(10))
					{
						case 1: newbuttonimage = link.ButtonImage1; break;
						case 2: newbuttonimage = link.ButtonImage2; break;
						case 3: newbuttonimage = link.ButtonImage3; break;
						case 4: newbuttonimage = link.ButtonImage4; break;
						case 5: newbuttonimage = link.ButtonImage5; break;
						case 6: newbuttonimage = link.ButtonImage6; break;
						case 7: newbuttonimage = link.ButtonImage7; break;
						case 8: newbuttonimage = link.ButtonImage8; break;
						case 9: newbuttonimage = link.ButtonImage9; break;
						case 10: newbuttonimage = link.ButtonImage10; break;
						case 11: newbuttonimage = link.ButtonImage11; break;
						case 12: newbuttonimage = link.ButtonImage12; break;
						case 13: newbuttonimage = link.ButtonImage13; break;
						case 14: newbuttonimage = link.ButtonImage14; break;
						case 15: newbuttonimage = link.ButtonImage15; break;
					}
				}
				newbuttonimage.setBoxTex(boxparty_ZF_BoxTextures.CreateSingleTexture("graphics/hat/HATBUTTON2A.png", true));
				link.updateUnlockLabel();
			}
			else if ((hatcheatmode.GetBool() == false) && (hatunlocked.GetBool() == false)) 
			{
				string languagehat = string.Format("$%s", link.BOXHAT_namelock[labelnum - 1]);
				link.updateLabel(false, languagehat);
			}
			else 
			{
				string spritename;
				string languagehat = "$HAT_SELECT_00";
				if (labelnum == 0) {spritename = "TNT1A0";}
				else {spritename = link.BOXHAT_sprite[labelnum - 1].Left(6); languagehat = string.Format("$%s", link.BOXHAT_name[labelnum - 1]);}
				hatsetting.SetString(spritename);
				link.updateHat();
				link.updateLabel(true, languagehat);
			}
		}
		else if (commandstring == "GoLeft")
		{
			int updatenum = link.hatPage;
			if (updatenum > 1) {updatenum += -1;}
			link.updatePage(updatenum);
		}
		else if (commandstring == "GoRight")
		{
			int updatenum = link.hatPage;
			if (updatenum < link.maxPage) {updatenum += 1;}
			link.updatePage(updatenum);
		}
		else if (commandstring == "ChangeColor")
		{
			cvar getColorCVAR = cvar.FindCVAR('box_hat_color');
			string languagehat;
			if (getColorCVAR.GetBool() == false) 
			{
				getColorCVAR.SetBool(true);
				languagehat = "$HAT_COLOR_ON";
				link.updateLabel(true, languagehat);
				link.updateColor();
			}
			else 
			{
				getColorCVAR.SetBool(false);
				languagehat = "$HAT_COLOR_OFF";
				link.updateLabel(false, languagehat);
				link.updateColor();
			}
		}
    }
}