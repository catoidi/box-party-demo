// Copyright 2006-2018 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Custom Widgets for SpriteShadows
// Adds tooltips to widgets
//
// Some redundant duplicates here but whatever; menus are painful to work
// with in general anyway. >:(
//
//===========================================================================

class OptionMenuItemBoxedOption : OptionMenuItemOption
{
	String mTooltip;

	OptionMenuItemBoxedOption Init(String label, String tooltip, Name command, Name values, CVar graycheck = null, int center = 0)
	{
		mTooltip = tooltip;
		Super.Init(label, command, values, graycheck, center);
		return self;
	}
}

class OptionMenuItemBoxedSlider : OptionMenuItemSlider
{
	String mTooltip;

	OptionMenuItemBoxedSlider Init(String label, String tooltip, Name command, double min, double max, double step, int showval = 1)
	{
		mTooltip = tooltip;
		Super.Init(label, command, min, max, step, showval);
		return self;
	}
}

class OptionMenuItemBoxedControl : OptionMenuItemControl
{
	String mTooltip;

	OptionMenuItemBoxedControl Init(String label, String tooltip, Name command)
	{
		mTooltip = tooltip;
		Super.Init(label, command);
		return self;
	}
}

//===========================================================================
//
// Boxed Menu
//
//===========================================================================

class BoxedOptionMenu : OptionMenu
{

	int bgpicked;
	int bgnum;
	TextureID bg;
	
	override void Drawer ()
	{
		if (bgpicked == 0)
		{
			bgnum = random[bg](1,4);
			
			if (bgnum == 1)
			{
				bg = TexMan.CheckForTexture("M_BGFAT1", TexMan.Type_MiscPatch);
			} else if (bgnum == 2)
			{
				bg = TexMan.CheckForTexture("M_BGFAT2", TexMan.Type_MiscPatch);
			} else if (bgnum == 3)
			{
				bg = TexMan.CheckForTexture("M_BGFAT3", TexMan.Type_MiscPatch);
			} else if (bgnum == 4)
			{
				bg = TexMan.CheckForTexture("M_BGFAT4", TexMan.Type_MiscPatch);
			} 
			
			bgpicked = 1;
		}
		
		screen.DrawTexture (bg, true, 0, 0, DTA_320x200, true);
		Super.Drawer();

		String tt;

		if (mDesc.mSelectedItem > 0)
		{
			if (mDesc.mItems[mDesc.mSelectedItem] is "OptionMenuItemBoxedOption")
			{
				tt = StringTable.Localize(OptionMenuItemBoxedOption(mDesc.mItems[mDesc.mSelectedItem]).mTooltip);
			}

			if (mDesc.mItems[mDesc.mSelectedItem] is "OptionMenuItemBoxedSlider")
			{
				tt = StringTable.Localize(OptionMenuItemBoxedSlider(mDesc.mItems[mDesc.mSelectedItem]).mTooltip);
			}

			if (mDesc.mItems[mDesc.mSelectedItem] is "OptionMenuItemBoxedControl")
			{
				tt = StringTable.Localize(OptionMenuItemBoxedControl(mDesc.mItems[mDesc.mSelectedItem]).mTooltip);
			}
		}

		if (tt.Length() > 0)
		{
			screen.DrawTexture (TexMan.CheckForTexture("TOOLTIPB", TexMan.Type_MiscPatch), true, 0, (Screen.GetHeight() - (NewSmallFont.GetHeight() * CleanYfac_1 * 1.8)), DTA_CleanNoMove_1, true);
			screen.DrawTexture (TexMan.CheckForTexture("TOOLTIPB", TexMan.Type_MiscPatch), true, 1024, (Screen.GetHeight() - (NewSmallFont.GetHeight() * CleanYfac_1 * 1.8)), DTA_CleanNoMove_1, true);
			
			Screen.DrawText (NewSmallFont, OptionMenuSettings.mFontColorValue,
				(Screen.GetWidth() - NewSmallFont.StringWidth (tt) * CleanXfac_1) / 2,
				(Screen.GetHeight() - (NewSmallFont.GetHeight() * CleanYfac_1)),
				tt,
				DTA_CleanNoMove_1, true);
			
			/*
			Screen.DrawText (NewConsoleFont, OptionMenuSettings.mFontColorValue,
				(Screen.GetWidth() - NewConsoleFont.StringWidth (tt) * CleanXfac_1) / 2,
				BigFont.GetHeight() * CleanYfac_1 * 1.8,
				tt,
				DTA_CleanNoMove_1, true);
			*/
		}
	}
}
