//zboxscript/handler/scorehandler.zsc

Class BoxScoreHandler : EventHandler
{
	//based off the Deathscreen from DI.
	ui PlayerPawn plr;
	ui Array<String> filedata, playerpool, playerlock, levelpool, levellock;
	ui bool getgamedata;
	
	override void InterfaceProcess(ConsoleEvent e)
	{
		if (e.Name.Left(14) == "box_highscore_")
		{
			string ep = e.Name.Mid(14);
			int prevscore = GetHighScore(ep);
			
			if (plr.score > prevscore) {UpdateHighScore(plr.score, ep);}
		}
	}

	override void UITick()
	{
		if (!getgamedata) 
		{
			GetBOXGAMEData();
			getgamedata = true;
		}
		
		plr = players[consoleplayer].mo;
	}
	
	ui virtual void GetBOXGAMEData()
	{
		//copy/pasted this function from newgamemenu.
	
		//clear file data and item pool. in case this function gets ran multiple times. (like for example if this shop were to change item pools mid-game.)
		filedata.Clear();
		playerpool.Clear();
		playerlock.Clear();
	
		int ThisLump = Wads.FindLump("BOXGAME", 0, Wads.ANYNAMESPACE);
		int NextLump = Wads.FindLump("BOXGAME", ThisLump + 1, Wads.ANYNAMESPACE);
		
		while (ThisLump != -1)
		{
			Wads.ReadLump(ThisLump).Split(filedata, "\n", TOK_SKIPEMPTY);
			ThisLump = NextLump;
			NextLump = Wads.FindLump("BOXGAME", ThisLump + 1, 1);
		}
		
		for (int i = 0; i < filedata.Size(); i++)
		{
			if (filedata[i].Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
			if (filedata[i].Length() < 3) {continue;}
			filedata[i] = filedata[i].Left(filedata[i].IndexOf(";"));
			
			Array<String> currentline;
			filedata[i] = filedata[i].MakeLower();
			filedata[i].Split(currentline, ", ", TOK_SKIPEMPTY);
			if (currentline[0] == "add")
			{
				if ((currentline[1] == "player") && (currentline[2]))
				{
					playerpool.Push(currentline[2]);
					if (currentline.Size() == 4) {playerlock.Push(currentline[3]);}
					else {playerlock.Push("u");}
					//console.printf("%s", currentline[2]);
				}
				else if ((currentline[1] == "level") && (currentline[2]))
				{
					levelpool.Push(currentline[2]);
					if (currentline.Size() == 4) {levellock.Push(currentline[3]);}
					else {levellock.Push("u");}
					//console.printf("%s", currentline[2]);
				}
			}
			else if (currentline[0] == "delete")
			{
				console.printf("%s", "'delete' feature not implemented yet.");
			}
			else {console.printf("failed: %s", currentline[0]);}
		}
	}
	
	ui virtual int GetHighScore(string episode)
	{
		if (!plr) {return 999999999;}
		cvar highscores = cvar.findcvar("box_highscore");
		string fullscores = highscores.getstring();
		array<string> scorelines;
		fullscores.split(scorelines, ",", TOK_SKIPEMPTY);
		if (scorelines.size() < 1) {return 0;}
		string playername = plr.GetClassName();
		int currentscore;
		for (int i = 0; i < scorelines.size(); ++i)
		{
			array<string> currentline;
			scorelines[i].split(currentline, " ", TOK_SKIPEMPTY);
			if (currentline.size() != 3) 
			{
				//something has gone terribly wrong!
				console.printf("%s", "\caWARNING: Junk data was detected in the highscore CVAR!");
				continue;
			}
			else
			{
				if (currentline[0] != playername) {continue;}
				if (currentline[1] != episode) {continue;}
				if (currentline[2].ToInt(10) > currentscore) {currentscore = currentline[2].ToInt(10);}
			}
		}
		return currentscore;
	}
	
	ui virtual void UpdateHighScore(int newscore, string episode)
	{
		if (!plr) {return;}
		cvar highscores = cvar.findcvar("box_highscore");
		string fullscores = highscores.getstring();
		array<string> scorelines;
		fullscores.split(scorelines, ",", TOK_SKIPEMPTY);
		string playername = plr.GetClassName();
		int scoreposition = -1;
		for (int i = 0; i < scorelines.size(); ++i)
		{
			array<string> currentline;
			scorelines[i].split(currentline, " ", TOK_SKIPEMPTY);
			if (currentline.size() != 3) 
			{
				//something has gone terribly wrong!
				console.printf("%s", "\caWARNING: Junk data was detected in the highscore CVAR!");
				continue;
			}
			else
			{
				if (currentline[0] != playername) {continue;}
				if (currentline[1] != episode) {continue;}
				currentline[2] = string.format("%d", newscore);
				scorelines[i] = string.format("%s %s %s", currentline[0], currentline[1], currentline[2]);
				scoreposition = i;
			}
		}
		if (scoreposition == -1)
		{
			string scoreinput = string.format("%s %s %d", playername, episode, newscore);
			scorelines.push(scoreinput);
		}
		
		string newcvar = "";
		for (int i = 0; i < scorelines.size(); ++i)
		{
			newcvar.AppendFormat("%s,", scorelines[i]);
		}
		highscores.setstring(newcvar);
	}
}