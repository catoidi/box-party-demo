class boxparty_Image : boxparty_Element {
	string image;
	AlignType alignment;
	Vector2 imageScale;
	bool tiled;

	void config(string image = "", AlignType alignment = AlignType_TopLeft, Vector2 imageScale = (1, 1), bool tiled = false) {
		self.image = image;
		self.alignment = alignment;
		self.imageScale = imageScale;
		self.tiled = tiled;
		self.alpha = 1;
	}

	static boxparty_Image create(Vector2 pos, Vector2 size, string image = "", AlignType alignment = AlignType_TopLeft, Vector2 imageScale = (1, 1), bool tiled = false) {
		let ret = new('boxparty_Image');

		ret.config(image, alignment, imageScale, tiled);
		ret.setBox(pos, size);

		return ret;
	}

	override void drawer() {
		boxparty_AABB beforeClip, clipRect;
		screenClip(beforeClip, clipRect);
		Screen.setClipRect(int(clipRect.pos.x), int(clipRect.pos.y), int(clipRect.size.x), int(clipRect.size.y));

		TextureID tex = TexMan.checkForTexture(image, TexMan.Type_Any);

		if (!tex) {
			return;
		}

		Vector2 imageSize = TexMan.getScaledSize(tex);

		imageSize.x *= imageScale.x;
		imageSize.y *= imageScale.y;

		if (tiled) {
			drawTiledImage((0, 0), box.size, image, true, imageScale);
		}
		else {
			Vector2 pos = getAlignedDrawPos(box.size, imageSize, alignment);
			drawImage(pos, image, true, imageScale);
		}

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));
	}
}
