class boxparty_Button : boxparty_ButtonBase {
	int holdTicInterval;
	protected int currentHoldTicsRemaining;

	void config(
		string text = "", boxparty_Handler cmdHandler = NULL, string command = "",
		boxparty_BoxTextures inactive = NULL, boxparty_BoxTextures hover = NULL,
		boxparty_BoxTextures click = NULL, boxparty_BoxTextures disabled = NULL,
		Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		int holdInterval = -1, AlignType alignment = AlignType_Center
	) {
		if (fnt == NULL) {
			self.fnt = smallfont;
		}
		else {
			self.fnt = fnt;
		}
		self.cmdHandler = cmdHandler;
		self.command = command;
		self.holdTicInterval = holdInterval;
		self.text = text;
		self.textScale = textScale;
		self.setTextures(inactive, hover, click, disabled);
		self.textColor = textColor;
		self.alignment = alignment;
		self.alpha = 1;
	}

	static boxparty_Button create(
		Vector2 pos, Vector2 size, string text = "", boxparty_Handler cmdHandler = NULL, string command = "",
		boxparty_BoxTextures inactive = NULL, boxparty_BoxTextures hover = NULL, boxparty_BoxTextures click = NULL,
		boxparty_BoxTextures disabled = NULL, Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		int holdInterval = -1, AlignType alignment = AlignType_Center
	) {
		let ret = new('boxparty_Button');

		ret.config(text, cmdHandler, command, inactive, hover, click, disabled, fnt, textScale, textColor, holdInterval, alignment);
		ret.setBox(pos, size);

		return ret;
	}

	override void ticker() {
		if (!isEnabled()) {
			curButtonState = ButtonState_Disabled;
			currentHoldTicsRemaining = 0;
			return;
		}
		if (holdTicInterval == -1) {
			currentHoldTicsRemaining = 0;
			return;
		}

		if (curButtonState == ButtonState_Click && currentHoldTicsRemaining <= 0) {
			if (cmdHandler) {
				cmdHandler.buttonHeldCommand(self, command);
			}
			currentHoldTicsRemaining = holdTicInterval;
		}
		else if (curButtonState == ButtonState_Click && currentHoldTicsRemaining > 0) {
			currentHoldTicsRemaining--;
		}
		else if (curButtonState != ButtonState_Click && currentHoldTicsRemaining != 0) {
			currentHoldTicsRemaining = 0;
		}
	}

	override void drawer() {
		boxparty_AABB screenBox; boxToScreen(screenBox);
		if (!isEnabled()) {
			curButtonState = ButtonState_Disabled;
		}
		else if (curButtonState != ButtonState_Click) {
			if (!mouseBlock && !getHoverBlock() && screenBox.pointCollides(master.mousePos)) {
				curButtonState = ButtonState_Hover;
			}
			else {
				curButtonState = ButtonState_Inactive;
			}
		}
		Super.drawer();
	}

	override bool onUIEvent(boxparty_UiEvent ev) {
		// if the player's clicked, and their mouse is in the right place, set the state accordingly
		if (ev.type == UIEvent.Type_LButtonDown) {
			boxparty_AABB screenBox; boxToScreen(screenBox);
			if (!ev.mouseBlock && isEnabled() && screenBox.pointCollides(master.mousePos)) {
				if (cmdHandler && holdTicInterval >= 0) {
					cmdHandler.buttonClickCommand(self, command);
					currentHoldTicsRemaining = holdTicInterval;
				}
				curButtonState = ButtonState_Click;
				setHoverBlock(self);
			}
		}
		// if the player's releasing, check if their mouse is still in the correct range and trigger method if it was
		else if (ev.type == UIEvent.Type_LButtonUp) {
			boxparty_AABB screenBox; boxToScreen(screenBox);
			if (!isEnabled()) {
				curButtonState = ButtonState_Disabled;
			}
			else if (screenBox.pointCollides(master.mousePos) && curButtonState == ButtonState_Click) {
				if (cmdHandler && holdTicInterval == -1) {
					cmdHandler.buttonClickCommand(self, command);
				}

				curButtonState = ButtonState_Hover;
			}
			else {
				curButtonState = ButtonState_Inactive;
			}
			setHoverBlock(NULL);
		}
		return false;
	}
}
