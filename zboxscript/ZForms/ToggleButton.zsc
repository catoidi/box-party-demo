class boxparty_ToggleButton : boxparty_ButtonBase {
	bool on;

	protected bool hover;
	protected bool click;

	void config(
		string text = "",
		boxparty_BoxTextures inactive = NULL, boxparty_BoxTextures hover = NULL,
		boxparty_BoxTextures click = NULL, boxparty_BoxTextures disabled = NULL,
		Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		AlignType alignment = AlignType_Center, boxparty_Handler cmdHandler = NULL, string command = ""
	) {
		if (fnt == NULL) {
			self.fnt = smallfont;
		}
		else {
			self.fnt = fnt;
		}
		self.text = text;
		self.textScale = textScale;
		self.setTextures(inactive, hover, click, disabled);
		self.textColor = textColor;
		self.alignment = alignment;
		self.cmdHandler = cmdHandler;
		self.command = command;
		self.alpha = 1;
	}

	static boxparty_ToggleButton create(
		Vector2 pos, Vector2 size, string text = "",
		boxparty_BoxTextures inactive = NULL, boxparty_BoxTextures hover = NULL, boxparty_BoxTextures click = NULL,
		boxparty_BoxTextures disabled = NULL, Font fnt = NULL, double textScale = 1, int textColor = Font.CR_WHITE,
		AlignType alignment = AlignType_Center, boxparty_Handler cmdHandler = NULL, string command = ""
	) {
		let ret = new('boxparty_ToggleButton');

		ret.config(text, inactive, hover, click, disabled, fnt, textScale, textColor, alignment, cmdHandler, command);
		ret.setBox(pos, size);

		return ret;
	}

	override void drawer() {
		if (isEnabled()) {
			boxparty_AABB screenBox; boxToScreen(screenBox);
			if (!mouseBlock && screenBox.pointCollides(master.mousePos)) {
				hover = true;
			}
			else {
				hover = false;
			}
		}
		if (!isEnabled()) { curButtonState = ButtonState_Disabled; }
		else if ((!getHoverBlock() && hover) || click) { curButtonState = ButtonState_Hover; }
		else if (on) { curButtonState = ButtonState_Click; }
		else { curButtonState = ButtonState_Inactive; }
		Super.drawer();
	}

	override void activate() {
		on = !on;
		if (cmdHandler != NULL) {
			cmdHandler.toggleButtonChanged(self, command, on);
		}
	}

	override bool onUIEvent(boxparty_UiEvent ev) {
		// if the player's clicked, and their mouse is in the right place, set the state accordingly
		if (ev.type == UIEvent.Type_LButtonDown) {
			boxparty_AABB screenBox; boxToScreen(screenBox);
			if (!ev.mouseBlock && isEnabled() && screenBox.pointCollides(master.mousePos)) {
				click = true;
				setHoverBlock(self);
			}
		}
		// if the player's releasing, check if their mouse is still in the correct range and trigger method if it was
		else if (ev.type == UIEvent.Type_LButtonUp) {
			if (isEnabled()) {
				boxparty_AABB screenBox; boxToScreen(screenBox);
				if (screenBox.pointCollides(master.mousePos) && click) {
					on = !on;
					if (cmdHandler != NULL) {
						cmdHandler.toggleButtonChanged(self, command, on);
					}
				}
				click = false;
				setHoverBlock(NULL);
			}
		}
		return false;
	}
}
