class boxparty_ElementTreeGlobal {
	Vector2 baseScreenSize;
	boxparty_Element hoverBlock;
}

class boxparty_Element ui {
	enum AlignType {
		AlignType_Left    = 1,
		AlignType_HCenter = 2,
		AlignType_Right   = 3,

		AlignType_Top     = 1 << 4,
		AlignType_VCenter = 2 << 4,
		AlignType_Bottom  = 3 << 4,

		AlignType_TopLeft   = AlignType_Top | AlignType_Left,
		AlignType_TopCenter = AlignType_Top | AlignType_HCenter,
		AlignType_TopRight  = AlignType_Top | AlignType_Right,

		AlignType_CenterLeft  = AlignType_VCenter | AlignType_Left,
		AlignType_Center      = AlignType_VCenter | AlignType_HCenter,
		AlignType_CenterRight = AlignType_VCenter | AlignType_Right,

		AlignType_BottomLeft   = AlignType_Bottom | AlignType_Left,
		AlignType_BottomCenter = AlignType_Bottom | AlignType_HCenter,
		AlignType_BottomRight  = AlignType_Bottom | AlignType_Right,
	}

	boxparty_Element master;

	boxparty_ElementTreeGlobal globalStore;

	boxparty_Handler cmdHandler;
	string command;

	boxparty_AABB box;
	double alpha;
	bool disabled;
	bool hidden;
	bool isHovered;

	bool needsMouseMove;
	Vector2 mousePos;

	bool mouseBlock;

	int round(double roundee) {
		if (roundee < 0) {
			return int(roundee - 0.5);
		}
		else {
			return int(roundee + 0.5);
		}
	}

	void setHoverBlock(boxparty_Element val) {
		let s = getGlobalStore();
		if (s != NULL) {
			s.hoverBlock = val;
		}
	}

	bool getHoverBlock() {
		let s = getGlobalStore();
		if (s != NULL) {
			return s.hoverBlock != NULL && s.hoverBlock != self;
		}
		return false;
	}

	void getClipAABB(boxparty_AABB curClip) {
		[curClip.pos.x, curClip.pos.y, curClip.size.x, curClip.size.y] = screen.GetClipRect();
		if (curClip.size.x == -1) {
			curClip.pos = (0, 0);
			curClip.size = screenSize();
		}
	}

	Vector2 getAspectRatioOffset() {
		Vector2 screenSize = screenSize();
		Vector2 virtualSize = getBaseVirtualSize();
		Vector2 baseScreenSize = baseScreenSize();
		if (screenSize.x / baseScreenSize.x == screenSize.y / baseScreenSize.y) {
			return (0, 0);
		}
		else if (screenSize.x / baseScreenSize.x < screenSize.y / baseScreenSize.y) {
			return (0, (screenSize.y - (screenSize.x * (baseScreenSize.y / baseScreenSize.x)))) / 2;
		}
		else {
			return ((screenSize.x - (screenSize.y * (baseScreenSize.x / baseScreenSize.y))), 0) / 2;
		}
	}

	/// Converts relative positioning to screen positioning.
	virtual Vector2 relToScreen(Vector2 relPos) {
		return master.relToScreen(box.pos + relPos);
	}

	Vector2 screenToRel(Vector2 screenPos) {
		return screenScaledToRel(screenPos / getScale()) - getAspectRatioOffset() / getScale();
	}

	/// Converts screen positioning to relative positioning.
	virtual Vector2 screenScaledToRel(Vector2 screenPos) {
		return master.screenToRel(screenPos - box.pos);
	}

	boxparty_ElementTreeGlobal getGlobalStore() {
		if (globalStore != NULL) return globalStore;
		if (master != NULL) {
			globalStore = master.getGlobalStore();
			return globalStore;
		}
		return NULL;
	}

	void setBaseResolution(Vector2 res) {
		let s = getGlobalStore();
		if (s != NULL) {
			s.baseScreenSize = res;
		}
	}

	Vector2 baseScreenSize() {
		let s = getGlobalStore();
		if (s != NULL) {
			return s.baseScreenSize;
		}
		return screenSize();
	}

	void aabbToScreen(boxparty_AABB ret, boxparty_AABB bounds, bool intersect = true) {
		ret.pos = relToScreen(bounds.pos) * getScale();
		ret.size = bounds.size * getScale();

		if (intersect && master != NULL) {
			boxparty_AABB screenBox; master.boxToScreen(screenBox, true);
			ret.rectOfIntersection(ret, screenBox);
		}
	}

	/// Return a bounding box which uses absolute coordinates.
	void boxToScreen(boxparty_AABB ret, bool intersect = true) {
		ret.pos = relToScreen((0, 0)) * getScale();
		ret.size = box.size * getScale();

		if (intersect && master != NULL) {
			boxparty_AABB screenBox; master.boxToScreen(screenBox, true);
			ret.rectOfIntersection(ret, screenBox);
		}
	}

	Vector2 screenSize() {
		return (Screen.getWidth(), Screen.getHeight());
	}

	double getScale() {
		Vector2 screenSize = screenSize();
		let baseScreenSize = baseScreenSize();
		return min(screenSize.x / baseScreenSize.x, screenSize.y / baseScreenSize.y);
	}

	Vector2 getBaseVirtualSize() {
		return screenSize() / getScale();
	}

	/// Converts a scale to virtual coordinates for drawing elements at a scale factor.
	Vector2 scaleToVirtualSize(Vector2 scale) {
		Vector2 screenSize = getBaseVirtualSize();
		return (screenSize.x / scale.x, screenSize.y / scale.y);
	}

	Vector2 texSize(string texture) {
		return TexMan.getScaledSize(TexMan.checkForTexture(texture, TexMan.Type_Any));
	}

	/// Gets the correct position to draw aligned content at.
	Vector2 getAlignedDrawPos(Vector2 boxSize, Vector2 contentSize, AlignType align) {
		Vector2 pos = (0, 0);
		int horzAlign = align &  15;
		int vertAlign = align & (15 << 4);

		if (horzAlign == AlignType_HCenter) {
			pos.x = (boxSize.x - contentSize.x) / 2.0;
		}
		else if (horzAlign == AlignType_Right) {
			pos.x = boxSize.x - contentSize.x;
		}

		if (vertAlign == AlignType_VCenter) {
			pos.y = (boxSize.y - contentSize.y) / 2.0;
		}
		else if (vertAlign == AlignType_Bottom) {
			pos.y = boxSize.y - contentSize.y;
		}

		return pos;
	}

	/// Gets the cumulative alpha value for the element.
	double getAlpha() {
		double calcAlpha = 1;

		boxparty_Element elem = self;
		while (elem) {
			calcAlpha *= elem.alpha;
			elem = elem.master;
		}

		return calcAlpha;
	}

	void screenClip(boxparty_AABB beforeClip, boxparty_AABB clipRect, boxparty_AABB aabb = NULL) {
		getClipAABB(beforeClip);
		if (aabb == NULL) boxToScreen(clipRect);
		else aabbToScreen(clipRect, aabb);
		clipRect.rectOfIntersection(clipRect, beforeClip);
		boxparty_AABB screenClip;
		screenClip.size = screenSize();
		clipRect.rectOfIntersection(clipRect, screenClip);
	}

	/// Draws text, taking into account relative positioning, and scale factor.
	void drawText(Vector2 relPos, Font fnt, string text, int color = Font.CR_WHITE, double scale = 1, double alpha = 1) {
		if (scale == 0) return;

		Vector2 drawPos = relToScreen(relPos) / scale;
		Vector2 virtualSize = scaleToVirtualSize((scale, scale));
		Screen.drawText(fnt, color, drawPos.x, drawPos.y, text, DTA_VirtualWidthF, virtualSize.x, DTA_VirtualHeightF, virtualSize.y, DTA_KeepRatio, true, DTA_Alpha, alpha * getAlpha());
	}

	void drawLine(Vector2 start, Vector2 end, double thickness, Color color) {
		Vector2 drawPosStart = relToScreen(start) * getScale();
		Vector2 drawPosEnd = relToScreen(end) * getScale();
		thickness *= getScale();

		boxparty_AABB aabb; getClipAABB(aabb);
		bool draw;
		Vector2 clippedStart, clippedEnd;
		[draw, clippedStart, clippedEnd] = aabb.cohenSutherlandClip(drawPosStart, drawPosEnd);

		if (draw) {
			Screen.drawThickLine(
				int(clippedStart.x), int(clippedStart.y),
				int(clippedEnd.x), int(clippedEnd.y),
				thickness, color
			);
		}
	}

	/// Draws an image, taking into account relative positioning, and scale factor.
	void drawImage(Vector2 relPos, string imageName, bool animate, Vector2 scale = (1, 1), double alpha = 1, boxparty_AABB clipRect = NULL) {
		if (scale.x == 0 || scale.y == 0) return;

		boxparty_AABB c;
		if (clipRect == NULL) {
			getClipAABB(c);
		}
		else {
			c.pos = clipRect.pos;
			c.size = clipRect.size;
		}
		TextureID tex = TexMan.checkForTexture(imageName, TexMan.Type_Any);
		Vector2 drawPos = relToScreen(relPos);
		drawPos = (drawPos.x / scale.x, drawPos.y / scale.y);
		Vector2 virtualSize = scaleToVirtualSize(scale);
		Screen.DrawTexture(
			tex, animate, drawPos.x, drawPos.y, DTA_VirtualWidthF, virtualSize.x, DTA_VirtualHeightF, virtualSize.y,
			DTA_KeepRatio, true, DTA_Alpha, alpha * getAlpha(),
			DTA_ClipLeft, int(c.pos.x), DTA_ClipTop, int(c.pos.y), DTA_ClipRight, int(c.pos.x + c.size.x), DTA_ClipBottom, int(c.pos.y + c.size.y),
			DTA_TopOffset, 0, DTA_LeftOffset, 0
		);
	}

	Vector2 scaleVec(Vector2 vec, Vector2 scale) {
		return (vec.x * scale.x, vec.y * scale.y);
	}

	/// Adds an axis-aligned quad to a Shape2D instance.
	void shape2DAddQuad(Shape2D shape, Vector2 pos, Vector2 size, Vector2 uvPos, Vector2 uvSize, out int vertCount) {
		shape.pushVertex((pos.x         , pos.y         ));
		shape.pushVertex((pos.x + size.x, pos.y         ));
		shape.pushVertex((pos.x         , pos.y + size.y));
		shape.pushVertex((pos.x + size.x, pos.y + size.y));

		shape.pushTriangle(vertCount + 0, vertCount + 3, vertCount + 1);
		shape.pushTriangle(vertCount + 0, vertCount + 2, vertCount + 3);

		shape.pushCoord((uvPos.x           , uvPos.y           ));
		shape.pushCoord((uvPos.x + uvSize.x, uvPos.y           ));
		shape.pushCoord((uvPos.x           , uvPos.y + uvSize.y));
		shape.pushCoord((uvPos.x + uvSize.x, uvPos.y + uvSize.y));

		vertCount += 4;
	}

	/// Draws a grid of images according to the size Vector2.
	/// Scales the image instead of tiling if possible.
	void drawTiledImage(Vector2 relPos, Vector2 size, string imageName, bool animate, Vector2 scale = (1, 1), double alpha = 1.0) {
		if (scale.x == 0 || scale.y == 0) {
			return;
		}

		Vector2 imageSize = texSize(imageName) * getScale();

		// Abort if the image has an invalid resolution.
		if (imageSize.x < 0 || imageSize.x ~== 0 || imageSize.y < 0 || imageSize.y ~== 0) {
			return;
		}

		Vector2 imageScale = scaleVec(imageSize, scale);
		let absPos = relToScreen(relPos) * getScale();
		let scaledSize = size * getScale();
		if (scaledSize ~== (0, 0)) {
			return;
		}

		let shape = new("Shape2D");
		shape.clear();

		double xSize = scaledSize.x / imageScale.x;
		double ySize = scaledSize.y / imageScale.y;
		int vertCount = 0;
		shape2DAddQuad(shape, absPos, scaledSize, (0, 0), (xSize, ySize), vertCount);

		let texID = TexMan.checkForTexture(imageName, TexMan.Type_Any);
		boxparty_AABB clipRect; getClipAABB(clipRect);
		Screen.drawShape(texID, animate, shape, DTA_Alpha, alpha * getAlpha(), DTA_ClipLeft, int(floor(clipRect.pos.x)), DTA_ClipTop, int(floor(clipRect.pos.y)), DTA_ClipRight, int(ceil(clipRect.pos.x + clipRect.size.x)), DTA_ClipBottom, int (ceil(clipRect.pos.y + clipRect.size.y)));

		shape.clear();
		shape.destroy();
	}

	/// Draws a coloured region, taking into account relative positioning, and scale factor.
	void fill(Vector2 relStartPos, Vector2 size, Color col, double amount) {
		boxparty_AABB aabb;
		Vector2 startPos = relToScreen(relStartPos) * getScale();
		aabb.pos = startPos;
		aabb.size = size * getScale();
		boxparty_AABB clip;
		getClipAABB(clip);
		aabb.rectOfIntersection(aabb, clip);
		
		if (aabb.size.x > 0.0 && aabb.size.y > 0.0) {
			Screen.dim(col, amount * getAlpha(), int(aabb.pos.x), int(aabb.pos.y), int(aabb.size.x), int(aabb.size.y));
		}
	}

	/// Packs the element into the master frame.
	void pack(boxparty_Frame master) {
		if (master != NULL) {
			unpack();
		}

		self.master = master;
		master.elements.push(self);
		master.onPack(self);
	}

	/// Unpacks the element from its master frame.
	void unpack() {
		if (master == NULL) {
			return;
		}
		if (!(master is "boxparty_Frame")) {
			throwAbortException("Tried to unpack a non-frame-bound element");
		}

		let masterFrame = boxparty_Frame(master);
		int index = masterFrame.elements.find (self);
		if (index != masterFrame.elements.Size ()) {
			masterFrame.elements.delete(index, 1);
		}
		master = NULL;
		globalStore = NULL;
	}

	void setBox(Vector2 pos, Vector2 size) {
		box.pos = pos;
		box.size = size;
	}

	// methods for overriding in derived elements
	virtual void ticker() {}
	virtual void drawer() {}
	virtual void topDrawer() {}
	virtual bool onUIEvent(boxparty_UiEvent ev) { return false; }
	virtual bool onUIEventPriority(boxparty_UiEvent ev) { return false; }

	virtual bool blocksMousePriority(Vector2 mousePos) { return false; }
	virtual bool blocksMouse(Vector2 mousePos) { return false; }

	virtual bool handleBack() { return false; }

	// Added by Chronos "phantombeta" Ouroboros
	bool isEnabled() {
		boxparty_Element elem = self;
		while (elem) {
			if (elem.disabled) {
				return false;
			}

			elem = elem.master;
		}

		return true;
	}

	virtual void doHover (bool mouseBlock, Vector2 mousePos) {
		boxparty_AABB screenBox; boxToScreen(screenBox);
		bool hover = (getHoverBlock() || mouseBlock) ? false : screenBox.pointCollides(mousePos);

		if (hover && !isHovered) {
			if (cmdHandler) {
				cmdHandler.elementHoverChanged(self, command, false);
			}
			isHovered = true;
		}
		else if (!hover && isHovered) {
			if (cmdHandler) {
				cmdHandler.elementHoverChanged(self, command, true);
			}
			isHovered = false;
		}
	}

	virtual void activate() {}
}
